#!/usr/bin/python
#################################################################
##\file
#
# \note
#   Copyright (c) 2010 \n
#   Fraunhofer Institute for Manufacturing Engineering
#   and Automation (IPA) \n\n
#
#################################################################
#
# \note
#   Project name: care-o-bot
# \note
#   ROS stack name: setup
# \note
#   ROS package name: setup
#
# \author
#   Author: Florian Weisshardt, email:florian.weisshardt@ipa.fhg.de
# \author
#   Supervised by: Florian Weisshardt, email:florian.weisshardt@ipa.fhg.de
#
# \date Date of creation: Oct 2011
#
# \brief
#   Implements helper script for working with git and the care-o-bot stacks.
#
#################################################################
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     - Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer. \n
#     - Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution. \n
#     - Neither the name of the Fraunhofer Institute for Manufacturing
#       Engineering and Automation (IPA) nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission. \n
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License LGPL as 
# published by the Free Software Foundation, either version 3 of the 
# License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License LGPL for more details.
# 
# You should have received a copy of the GNU Lesser General Public 
# License LGPL along with this program. 
# If not, see <http://www.gnu.org/licenses/>.
#
#################################################################

import os
import sys
import shlex
import platform
from optparse import OptionParser

# Check for filesystem
if platform.system() == 'Linux':
	_dev_null = "/dev/null"
elif platform.system() == 'Windows':
	_dev_null = "nul"
else:
	_dev_null = "nul"

_usage = """usage: %prog [options] <command>

Commands:

%prog status / st...
  Executes 'git status -uno'
  (use option -s to specify stacks, default is all stacks)

%prog branch / br...
  Executes 'git branch'
  (use option -s to specify stacks, default is all stacks)
  
%prog remote...
  Executes 'git remote -v'
  (use option -s to specify stacks, default is all stacks)

%prog pull...
  Pulls latest changes from your origin master 
  (use option -s to specify stacks, default is all stacks)

%prog push...
  Pushes local commits to origin master 
  (use option -s to specify stacks, default is all stacks)

%prog merge...
  Merges from a remote branch 
  (use option -u, default is "ipa320")
"""


## Main githelper script
#
# Parses arguments and starts helping. Everything is done regarding the local master branch
#TODO: check for latest version before executing command
def main():
	#print "main ..."
	parser = OptionParser(usage=_usage, prog=os.path.basename(sys.argv[0]))
	
	parser.add_option("-u", "--user",
		dest="githubuser", default="ipa320",
		help="Username on http://www.github.com. Default: ipa320")
	
	parser.add_option("-s", "--stacks",
		dest="stacks", metavar="STACK_NAMES_LIST,COMMA_SEPERATED", default="",
		help="Comma separated list of stacks to operate on. Default: all stacks in ~/git/care-o-bot")
	
	parser.add_option("-d", "--directory",
		dest="install_dir", default="~/git/care-o-bot",
		help="Installation directory of care-o-bot stacks. Default: ~/git/care-o-bot")
	
	(options, args) = parser.parse_args()

	# check for input parameters
	if len(args) == 0:
		parser.error("You must supply a command to githelper.")
	if len(args) != 1:
		parser.error("githelper only accepts a single command.")

	# start helping
	#print 'DEBUG: githelper starting with args %s, options %s'%(args, options)
	print ""

	if options.stacks == "":
		stacks = get_all_stacks(options)
	else:
		# convert comma separated string to list of stacks
		splitter = shlex.shlex(options.stacks, posix=True)
		splitter.whitespace += ','
		splitter.whitespace_split = True
		stacks = list(splitter)

	# operate git command on selected stacks
	for stack in stacks:
		# change environment to stack path
		full_dir = os.path.expanduser(options.install_dir + "/" + stack)
		if not os.path.exists(full_dir):
			parser.error("selected stack " + stack + " not found in " + options.install_dir + ", aborting...")
			exit(1)
		
		# set working directory to stack directory
		os.chdir(full_dir)
		print "-------------------------------------------"
		print "==> operating on " + os.getcwd()
		print "-------------------------------------------"

		if args[0] == "status" or args[0] == "st":
			git_status()
		elif args[0] == "branch" or args[0] == "br":
			git_branch()
		elif args[0] == "remote":
			git_remote()
		elif args[0] == "pull":
			print "pulling..."
			check_for_update()
			git_pull()
		elif args[0] == "push":
			print "pushing..."
			check_for_update()
			git_push()
		elif args[0] == "merge":
			print "merging..."
			check_for_update()
			git_merge(stack, options)
		elif args[0] == "mergeto":
			print "merging to..."
			check_for_update()
			git_mergeto(stack, options)
		else:
			parser.error("command \"" + args[0] + "\" not supported.")
#		print "...done."
		print ""


def git_branch():
	os.system("git branch")


def git_remote():
	os.system("git remote -v")


def git_status():
	#print "git_status ... "
	os.system("git status -uno")


def git_pull():
	#print "git_pull ... "
	# check for uncommited changes
	check_for_changes()
	
	# operate on master branch
	os.system("git checkout master > " + _dev_null + " 2>&1")

	# fetch from origin
	os.system("git fetch origin > " + _dev_null + " 2>&1")
	
	# merge own origin/master
	os.system("git merge origin/master > " + _dev_null)
	if has_conflicts():
		print "ERROR: Conflicts found. Please pull manually and resolve conflicts! Resetting changes and aborting..."
		os.system("git reset --hard HEAD")
		exit(1)


def git_push():
	#print "git_push ... "
	# first pull from origin master
	git_pull()

	# push to origin master
	os.system("git push origin master > " + _dev_null + " 2>&1")


def git_merge(stack, options):
	#print "git_merge ... "
	git_push()

	# create remote origin if not exists
	p = os.popen("git remote")
	status = p.read()
	p.close()
	if status.count("origin-" + options.githubuser) <= 0:
		os.system("git remote add origin-" + options.githubuser + " git@github.com:" + options.githubuser + "/" + stack + ".git")

	# change to automerge branch
	os.system("git checkout -b automerge > " + _dev_null + " 2>&1")
	
	# fetch from origin-githubuser and merge and push
	os.system("git fetch origin-" + options.githubuser + " > " + _dev_null + " 2>&1")
	os.system("git merge origin-" + options.githubuser + "/master > " + _dev_null + " 2>&1")
	if has_conflicts():
		print "ERROR: conflicts found. Please merge manually and resolve conflicts! Resetting changes and aborting..."
		os.system("git reset --hard HEAD > " + _dev_null + " 2>&1")
		os.system("git checkout master > " + _dev_null + " 2>&1")
		os.system("git branch -D automerge > " + _dev_null + " 2>&1")
		exit(1)
	
	os.system("git checkout master > " + _dev_null + " 2>&1")
	os.system("git merge automerge > " + _dev_null + " 2>&1")
	os.system("git branch -D automerge > " + _dev_null + " 2>&1")
	git_push()

def git_mergeto(stack, options):
	#print "git_mergeto ... "
	git_merge(stack, options)
	os.system("git push origin-" + options.githubuser + " master > " + _dev_null + " 2>&1")

def check_for_update():#TODO check for new version, use timeout if no internet connection available
	#print "check_for_update ... "
	#print "There is a new version of githelper available. Please use the following commands to update:\n"
	#print "wget http://www.github.com/ipa320/setup... "
	#print "chmod +x githelper"
	pass
	

## returns a list of all stacks in options.install_dir
def get_all_stacks(options):
	#print "get_all_stacks ..."
	# get all directories
	dirs = os.walk(os.path.expanduser(options.install_dir)).next()[1]
	
	# check if directory is a stack
	stacks = []
	for directory in dirs:
		if os.path.exists(os.path.expanduser(options.install_dir) + "/" + directory + "/stack.xml"):
			#print "directory, "is a stack"
			stacks.append(directory)
		else:
			#print directory, "is not a stack"
			pass
	return stacks


## checks for uncommited changes
def check_for_changes():
	#print "check_for_changes ..."
	p = os.popen('git status -uno --porcelain')
	status = p.read()
	p.close()
	if status != "":
		print "ERROR: found local changes in " + os.getcwd() + ": please commit or reset them first before continuing, aborting..."
		print "Status: \n" + status
		exit(1)


## check if a merge is conflicting
def has_conflicts():
	#print "has_conflicts ..."
	p = os.popen("git status -uno")
	status = p.read()
	p.close()
	
	if status.count("Unmerged paths") <= 0:
		# no conflict found
		return False
	else: 
		# conflict found
		return True
	


## Main routine for running the githelper script
#
if __name__ == '__main__':
	main()
